import { loadable, connect, styled, decode } from "frontity";

import { useArchiveInfiniteScroll } from "@frontity/hooks";

import React from "react";

//import AllTax from "./list-cat";

// Thanks to loadable we prevent component from loading until it's needed.
const AllTax = loadable(() => import('./list-cat'));

import Loading from "../loading";


const InfiniteListTaxNormal = ({ state, link }) => {

    // Important
    const data = state.source.get(state.router.link);

    const {
        pages,
        isFetching,
        isError,
        isLimit,
        fetchNext
    } = useArchiveInfiniteScroll({ limit: 0 });

    // data.total → total pages that match the current path/url
    // data.searchQuery → query done to get search results
    const { total, searchQuery } = data;
    const isEmpty = data.total === 0;

    let revimg ='';
    let fb ='';
    let twt ='';
    let ig ='';
    let lnk ='';
    let weburl ='';
    let hgrade ='';

    try {
        revimg = state.source.author[data.id].prairieuser.reviewer_image;
        fb = state.source.author[data.id].prairieuser.facebook_prairie;
        twt = state.source.author[data.id].prairieuser.twitter_prairie;
        ig = state.source.author[data.id].prairieuser.instagram_prairie;
        lnk = state.source.author[data.id].prairieuser.linkedin_prairie;
        weburl = state.source.author[data.id].prairieuser.website_prairie;
        hgrade = state.source.author[data.id].prairieuser.healthgrade_prairie;
    }catch(error) {
        //console.log(error.name + ":" + error.message);
    }


  return (
    <Container>

        {/* If the list is a taxonomy, we render a title. */}
        {data.isTaxonomy && (
            <div className="CategoryHeading">
                <Header>
                    {decode(state.source[data.taxonomy][data.id].name)}
                </Header>
            </div>
        )}

        {/* If the list is for a specific author, we render a title. */}
        {data.isAuthor && (
          <div className="AuthorHeading">
          <Header>
            {decode(state.source.author[data.id].name)}
          </Header>
          <AuthorDescription>
              <div>
                { revimg ?
                      <img src= {decode(state.source.author[data.id].prairieuser.reviewer_image)} alt={decode(state.source.author[data.id].name)}/>
                    :
                    <img src= {decode(state.source.author[data.id].avatar_urls[96])} alt={decode(state.source.author[data.id].name)}/>
                }
              </div>
              <div><p>{decode(state.source.author[data.id].description)}</p></div>
          </AuthorDescription>

          <AuthorSocial>
                {fb ?
                  <a href={decode(state.source.author[data.id].prairieuser.facebook_prairie)} target="_blank"><svg className="svgIcon" width="24" height="24" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fillRule="evenodd" clipRule="evenodd" d="M32.5 0H7.5C3.35789 0 0 3.35789 0 7.5V32.5C0 36.6421 3.35789 40 7.5 40H32.5C36.6421 40 40 36.6421 40 32.5V7.5C40 3.35789 36.6421 0 32.5 0ZM31.4842 21.5421H27.7421V35.3947H21.4895V21.5421H19.0632V16.8737H21.4895V13.9C21.4895 10.0053 23.1105 7.68947 27.7 7.68947H32.3526V12.3368H29.6474C27.8579 12.3368 27.7421 13.0053 27.7421 14.2474L27.7368 16.8684H31.9895L31.4789 21.5368L31.4842 21.5421Z" fill="#6D9147"/>
                  </svg>
                  </a>
                : null }
                {twt ?
                  <a href={decode(state.source.author[data.id].prairieuser.twitter_prairie)} target="_blank"><svg className="svgIcon" width="29" height="24" viewBox="0 0 50 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M15.4729 40C34.0398 40 44.1934 24.6124 44.1934 11.2688C44.1934 10.8318 44.1845 10.3968 44.1648 9.9636C46.1405 8.53352 47.8455 6.76285 49.2 4.7346C47.3913 5.539 45.445 6.0804 43.4032 6.3245C45.4873 5.0744 47.0872 3.0967 47.8421 0.7393C45.8606 1.91519 43.6928 2.74414 41.4323 3.1904C39.5903 1.2276 36.9679 0 34.0641 0C28.4897 0 23.9693 4.5222 23.9693 10.0965C23.9693 10.889 24.058 11.6596 24.2312 12.399C15.8417 11.9767 8.4025 7.9585 3.4238 1.8486C2.52709 3.38964 2.05543 5.14106 2.057 6.924C2.057 10.4274 3.839 13.5201 6.549 15.3295C4.946 15.2805 3.37819 14.8474 1.9774 14.0665C1.9759 14.1089 1.9759 14.1502 1.9759 14.1955C1.9759 19.0858 5.4553 23.1689 10.0741 24.0941C9.20663 24.3304 8.31149 24.4499 7.4124 24.4494C6.7631 24.4494 6.1303 24.3855 5.5153 24.2674C6.8004 28.2796 10.5268 31.1993 14.9449 31.2809C11.49 33.9898 7.1379 35.6033 2.4078 35.6033C1.60315 35.604 0.799157 35.5573 0 35.4634C4.4674 38.3279 9.772 39.9993 15.4734 39.9993" fill="#6D9147"/>
                  </svg>
                  </a>
                : null }
                {ig ?
                  <a href={decode(state.source.author[data.id].prairieuser.instagram_prairie)} target="_blank"><svg className="svgIconIG" width="24" height="24" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M10.143 39.8585C7.76414 39.7503 6.4719 39.3545 5.61239 39.0192C4.4735 38.5758 3.66154 38.048 2.80679 37.1944C1.95203 36.3408 1.42301 35.5289 0.98196 34.39C0.646714 33.5305 0.25084 32.2382 0.142658 29.8594C0.0237763 27.288 0 26.5165 0 20.0018C0 13.4871 0.0261539 12.7167 0.141469 10.143C0.249651 7.76414 0.647903 6.47428 0.980771 5.61239C1.4242 4.4735 1.95322 3.66154 2.8056 2.8056C3.65917 1.95203 4.47113 1.42182 5.6112 0.980771C6.47071 0.645526 7.76295 0.249651 10.1418 0.141469C12.7144 0.0237763 13.4871 0 19.9994 0C26.5141 0 27.2845 0.0261539 29.8582 0.141469C32.237 0.249651 33.5269 0.647903 34.3888 0.980771C35.5277 1.42182 36.3396 1.95203 37.1944 2.8056C38.0492 3.65917 38.5758 4.47232 39.0192 5.6112C39.3545 6.47071 39.7503 7.76295 39.8585 10.1418C39.9762 12.7155 40 13.4859 40 20.0006C40 26.5129 39.9762 27.2856 39.8585 29.8594C39.7503 32.2382 39.3521 33.5305 39.0192 34.39C38.5758 35.5289 38.048 36.3408 37.1944 37.1944C36.3408 38.048 35.5277 38.5758 34.3888 39.0192C33.5293 39.3545 32.237 39.7503 29.8582 39.8585C27.2868 39.9762 26.5141 40 19.9994 40C13.4871 40 12.7144 39.9774 10.143 39.8585Z" fill="#6D9147"/>
                  <path d="M10.143 39.8585C7.76414 39.7503 6.4719 39.3545 5.61239 39.0192C4.4735 38.5758 3.66154 38.048 2.80679 37.1944C1.95203 36.3408 1.42301 35.5289 0.98196 34.39C0.646714 33.5305 0.25084 32.2382 0.142658 29.8594C0.0237763 27.288 0 26.5165 0 20.0018C0 13.4871 0.0261539 12.7167 0.141469 10.143C0.249651 7.76414 0.647903 6.47428 0.980771 5.61239C1.4242 4.4735 1.95322 3.66154 2.8056 2.8056C3.65917 1.95203 4.47113 1.42182 5.6112 0.980771C6.47071 0.645526 7.76295 0.249651 10.1418 0.141469C12.7144 0.0237763 13.4871 0 19.9994 0C26.5141 0 27.2845 0.0261539 29.8582 0.141469C32.237 0.249651 33.5269 0.647903 34.3888 0.980771C35.5277 1.42182 36.3396 1.95203 37.1944 2.8056C38.0492 3.65917 38.5758 4.47232 39.0192 5.6112C39.3545 6.47071 39.7503 7.76295 39.8585 10.1418C39.9762 12.7155 40 13.4859 40 20.0006C40 26.5129 39.9762 27.2856 39.8585 29.8594C39.7503 32.2382 39.3521 33.5305 39.0192 34.39C38.5758 35.5289 38.048 36.3408 37.1944 37.1944C36.3408 38.048 35.5277 38.5758 34.3888 39.0192C33.5293 39.3545 32.237 39.7503 29.8582 39.8585C27.2868 39.9762 26.5141 40 19.9994 40C13.4871 40 12.7144 39.9774 10.143 39.8585Z" fill="#6D9147"/>
                  <path d="M15.0892 20.0853C15.0892 17.3497 17.3062 15.1315 20.0418 15.1315C22.7774 15.1315 24.9956 17.3497 24.9956 20.0853C24.9956 22.8208 22.7774 25.039 20.0418 25.039C17.3062 25.039 15.0892 22.8208 15.0892 20.0853ZM12.4113 20.0853C12.4113 24.2996 15.8275 27.7158 20.0418 27.7158C24.2561 27.7158 27.6723 24.2996 27.6723 20.0853C27.6723 15.8709 24.2561 12.4547 20.0418 12.4547C15.8275 12.4547 12.4114 15.8707 12.4114 20.0853H12.4113ZM26.1913 12.1522C26.1911 12.5049 26.2956 12.8497 26.4914 13.143C26.6872 13.4363 26.9656 13.665 27.2914 13.8001C27.6172 13.9352 27.9757 13.9707 28.3217 13.902C28.6676 13.8333 28.9854 13.6636 29.2349 13.4143C29.4844 13.1651 29.6544 12.8474 29.7233 12.5015C29.7923 12.1556 29.7571 11.7971 29.6222 11.4712C29.4874 11.1453 29.259 10.8667 28.9658 10.6706C28.6726 10.4746 28.3279 10.3698 27.9752 10.3697H27.9745C27.5017 10.3699 27.0484 10.5578 26.7141 10.892C26.3797 11.2262 26.1917 11.6794 26.1913 12.1522ZM14.0383 32.1812C12.5895 32.1152 11.802 31.8739 11.2787 31.67C10.5849 31.3999 10.0899 31.0782 9.56943 30.5585C9.04896 30.0387 8.7268 29.5442 8.45789 28.8504C8.25389 28.3273 8.01256 27.5396 7.9467 26.0908C7.87466 24.5244 7.86027 24.0539 7.86027 20.0855C7.86027 16.1171 7.87585 15.6479 7.9467 14.0802C8.01268 12.6314 8.25579 11.8452 8.45789 11.3206C8.72799 10.6268 9.04968 10.1318 9.56943 9.61134C10.0892 9.09088 10.5837 8.76871 11.2787 8.4998C11.8018 8.2958 12.5895 8.05447 14.0383 7.98861C15.6047 7.91657 16.0752 7.90219 20.0418 7.90219C24.0084 7.90219 24.4794 7.91752 26.0471 7.98885C27.4959 8.05483 28.282 8.29794 28.8067 8.50004C29.5005 8.76895 29.9955 9.09183 30.5159 9.61158C31.0364 10.1313 31.3574 10.6271 31.6275 11.3209C31.8315 11.8439 32.0728 12.6316 32.1387 14.0804C32.2107 15.6481 32.2251 16.1174 32.2251 20.0857C32.2251 24.0541 32.2107 24.5233 32.1387 26.091C32.0727 27.5398 31.8302 28.3273 31.6275 28.8506C31.3574 29.5444 31.0357 30.0394 30.5159 30.5587C29.9962 31.078 29.5005 31.4002 28.8067 31.6702C28.2836 31.8743 27.4959 32.1156 26.0471 32.1814C24.4807 32.2535 24.0102 32.2679 20.0418 32.2679C16.0734 32.2679 15.6042 32.2535 14.0383 32.1814V32.1812ZM13.9152 5.31509C12.3333 5.38713 11.2523 5.63797 10.3083 6.00532C9.33119 6.38467 8.50294 6.8936 7.67589 7.71935C6.84883 8.5451 6.34121 9.37346 5.96186 10.3517C5.59452 11.2964 5.34368 12.3768 5.27163 13.9587C5.1984 15.5432 5.18164 16.0497 5.18164 20.0853C5.18164 24.1208 5.1984 24.6274 5.27163 26.2118C5.34368 27.7939 5.59452 28.8742 5.96186 29.8188C6.34121 30.7959 6.84895 31.6258 7.67589 32.4512C8.50282 33.2766 9.33 33.7848 10.3083 34.1652C11.2541 34.5326 12.3333 34.7834 13.9152 34.8554C15.5005 34.9275 16.0062 34.9454 20.0418 34.9454C24.0773 34.9454 24.5839 34.9287 26.1683 34.8554C27.7504 34.7834 28.8307 34.5326 29.7753 34.1652C30.7524 33.7848 31.5806 33.2769 32.4077 32.4512C33.2348 31.6254 33.7413 30.7959 34.1217 29.8188C34.4891 28.8742 34.7411 27.7938 34.8119 26.2118C34.884 24.6262 34.9008 24.1208 34.9008 20.0853C34.9008 16.0497 34.884 15.5432 34.8119 13.9587C34.7399 12.3766 34.4891 11.2958 34.1217 10.3517C33.7413 9.37465 33.2334 8.5464 32.4077 7.71935C31.5819 6.89229 30.7524 6.38467 29.7765 6.00532C28.8307 5.63797 27.7503 5.38594 26.1695 5.31509C24.5848 5.24269 24.0785 5.2251 20.0436 5.2251C16.0086 5.2251 15.5011 5.24186 13.9158 5.31509" fill="white"/>
                  </svg>
                  </a>
                : null }
                {lnk ?
                    <a href={decode(state.source.author[data.id].prairieuser.linkedin_prairie)} target="_blank"><svg className="svgIconLNK" width="24" height="24" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clipPath="url(#clip0)">
                    <path d="M0 2.93385C0 1.35862 1.31877 0.08 2.94443 0.08H36.8956C38.5219 0.08 39.84 1.35862 39.84 2.93385V37.0666C39.84 38.6423 38.5219 39.92 36.8956 39.92H2.94443C1.31892 39.92 0 38.6425 0 37.0671V2.93338V2.93385Z" fill="#6D9147"/>
                    <path d="M12.107 33.4208V15.4846H6.14535V33.4208H12.1077H12.107ZM9.12743 13.0362C11.206 13.0362 12.5 11.6589 12.5 9.93768C12.4611 8.17724 11.206 6.83839 9.16696 6.83839C7.12656 6.83839 5.79395 8.17724 5.79395 9.93752C5.79395 11.6587 7.0875 13.036 9.08837 13.036H9.12697L9.12743 13.0362ZM15.4069 33.4208H21.3681V23.4055C21.3681 22.8702 21.407 22.3334 21.5645 21.951C21.9953 20.8796 22.9762 19.7704 24.6235 19.7704C26.7801 19.7704 27.6434 21.4151 27.6434 23.8265V33.4208H33.6044V23.1368C33.6044 17.6278 30.6638 15.0641 26.7415 15.0641C23.5259 15.0641 22.1136 16.8615 21.3289 18.0856H21.3686V15.4853H15.4072C15.485 17.1679 15.4067 33.4214 15.4067 33.4214L15.4069 33.4208Z" fill="white"/>
                    </g>
                    <defs>
                    <clipPath id="clip0">
                    <rect width="39.84" height="40" fill="white"/>
                    </clipPath>
                    </defs>
                    </svg>
                    </a>
                : null }
                {hgrade ?
                    <a href={decode(state.source.author[data.id].prairieuser.healthgrade_prairie)} target="_blank"><svg width="29" height="24" className="svgIcon" viewBox="0 0 50 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M23.9874 39.2034L4.03075 19.2468C-7.10545 8.11059 9.20282 -6.96791 19.7462 3.56892L23.6134 7.53574C23.8686 7.90626 24.2101 8.2092 24.6084 8.41848C25.0067 8.62776 25.4499 8.73711 25.8998 8.73711C26.3497 8.73711 26.7929 8.62776 27.1912 8.41848C27.5895 8.2092 27.9309 7.90626 28.1861 7.53574L32.7213 3.06102C32.9234 2.79006 33.1791 2.56359 33.4725 2.39573C33.7659 2.22787 34.0907 2.12221 34.4267 2.08532C34.7627 2.04843 35.1027 2.08111 35.4255 2.18132C35.7484 2.28153 36.0471 2.44712 36.3032 2.66778C36.5592 2.88845 36.7671 3.15947 36.9139 3.46396C37.0607 3.76845 37.1432 4.0999 37.1563 4.43766C37.1695 4.77543 37.1129 5.11229 36.9902 5.42726C36.8675 5.74222 36.6813 6.02856 36.4432 6.26845L25.6483 17.145C23.6771 19.1161 26.2787 21.4694 28.1453 19.6044L30.9396 16.8837C31.1481 16.6113 31.4118 16.3859 31.7133 16.2223C32.0149 16.0587 32.3475 15.9605 32.6896 15.9342C33.0317 15.9079 33.3754 15.954 33.6985 16.0695C34.0215 16.185 34.3165 16.3674 34.5643 16.6046C34.8121 16.8419 35.0071 17.1288 35.1365 17.4465C35.2659 17.7642 35.3268 18.1057 35.3154 18.4485C35.3039 18.7914 35.2202 19.128 35.0698 19.4364C34.9194 19.7447 34.7057 20.0179 34.4426 20.2381L26.0288 28.7106C23.927 30.8124 26.277 33.3944 28.4213 31.2485L40.312 19.6044C43.1602 16.7563 46.2663 20.5026 43.8363 22.9327L27.8007 39.2099C27.2945 39.7158 26.6081 40 25.8924 40C25.1767 40 24.4904 39.7158 23.9841 39.2099L23.9874 39.2034ZM44.1907 15.8646C44.1907 15.3604 44.3402 14.8675 44.6203 14.4483C44.9004 14.0291 45.2986 13.7023 45.7644 13.5094C46.2302 13.3164 46.7428 13.2659 47.2373 13.3643C47.7318 13.4627 48.186 13.7055 48.5426 14.062C48.8991 14.4185 49.1419 14.8727 49.2403 15.3673C49.3386 15.8618 49.2881 16.3743 49.0952 16.8402C48.9022 17.306 48.5755 17.7041 48.1563 17.9842C47.737 18.2644 47.2442 18.4139 46.7399 18.4139C46.0638 18.4139 45.4154 18.1453 44.9373 17.6672C44.4592 17.1891 44.1907 16.5407 44.1907 15.8646ZM36.4644 11.4993C39.0611 8.90265 41.8112 6.11003 44.5695 3.35008C47.3279 0.590124 50.6823 3.93963 48.066 6.55587C45.4498 9.17211 39.7812 14.7541 39.7812 14.7541C39.5303 15.0254 39.2277 15.2439 38.8911 15.3967C38.5546 15.5496 38.191 15.6337 37.8215 15.6441C37.3361 15.6486 36.8618 15.4984 36.4675 15.2154C36.0731 14.9323 35.779 14.5311 35.6278 14.0698C35.4767 13.6085 35.4763 13.1111 35.6267 12.6495C35.7771 12.188 36.0705 11.7862 36.4644 11.5026V11.4993Z" fill="#6D9147"/>
                    </svg>
                    </a>
                : null }
                {weburl ?
                    <a href={decode(state.source.author[data.id].prairieuser.website_prairie)} target="_blank"><svg className="svgIcon" width="24" height="24" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21 1C9.96842 1 1 9.96842 1 21C1 32.0316 9.96842 41 21 41C32.0316 41 41 32.0316 41 21C41 9.96842 32.0316 1 21 1ZM25.2947 11.4C23.9053 11.6526 22.4737 11.7789 21 11.7789C19.5263 11.7789 18.0947 11.6526 16.7053 11.4C17.8 6.43158 19.6105 3.48421 21 3.48421C22.3895 3.48421 24.2 6.43158 25.2947 11.4ZM25.2526 4.03158C28.2842 4.78947 31.0211 6.34737 33.2105 8.49474C31.6105 9.50526 29.7579 10.3053 27.7368 10.8526C27.1474 8.15789 26.3053 5.8 25.2526 4.03158ZM15.7789 19.7368C15.8211 17.5895 15.9895 15.6105 16.2842 13.8421C17.8421 14.0947 19.4 14.2632 21.0421 14.2632C22.6421 14.2632 24.2421 14.0947 25.8 13.8421C26.0526 15.6105 26.2211 17.5895 26.3053 19.7368H15.7789ZM26.2211 22.2632C26.1789 24.4105 26.0105 26.3895 25.7579 28.1579C24.2 27.9053 22.6421 27.7368 21 27.7368C19.4 27.7368 17.8 27.9053 16.2421 28.1579C15.9895 26.3895 15.8211 24.4105 15.7789 22.2632H26.2211ZM14.2632 10.8526C12.2421 10.3053 10.3895 9.50526 8.78947 8.49474C10.9789 6.34737 13.7158 4.83158 16.7474 4.03158C15.6947 5.8 14.8526 8.15789 14.2632 10.8526ZM13.8421 13.3368C13.5053 15.4 13.3368 17.5895 13.2947 19.7789H3.61053C3.86316 16.2842 5.16842 13.0421 7.18947 10.3895C9.04211 11.6526 11.3579 12.6632 13.8421 13.3368ZM13.2526 22.2632C13.2947 24.4526 13.5053 26.6 13.8 28.7053C11.3158 29.379 9.04211 30.3474 7.10526 31.6526C5.08421 29 3.82105 25.7579 3.56842 22.2632H13.2526ZM14.2632 31.1474C14.8526 33.8421 15.6947 36.2421 16.7474 37.9684C13.7158 37.2105 10.9789 35.6526 8.78947 33.5053C10.3895 32.4947 12.2421 31.6947 14.2632 31.1474ZM16.7053 30.6C18.0947 30.3474 19.5263 30.2211 21 30.2211C22.4737 30.2211 23.9053 30.3474 25.2947 30.6C24.2 35.5684 22.3895 38.5158 21 38.5158C19.6105 38.5158 17.8 35.5684 16.7053 30.6ZM27.7368 31.1474C29.7579 31.6947 31.6105 32.4947 33.2105 33.5474C31.0211 35.6947 28.2842 37.2105 25.2526 38.0105C26.3053 36.2 27.1474 33.8421 27.7368 31.1474ZM28.1579 28.6632C28.4947 26.6 28.6632 24.4105 28.7053 22.2211H38.3895C38.1368 25.7158 36.8316 28.9579 34.8105 31.6105C32.9158 30.3474 30.6421 29.3368 28.1579 28.6632ZM28.7474 19.7368C28.7053 17.5474 28.4947 15.4 28.2 13.2947C30.6842 12.6211 32.9579 11.6526 34.8947 10.3474C36.9158 13 38.2211 16.2 38.4737 19.7368H28.7474Z" fill="#6D9147" stroke="#6D9147"/>
                    </svg>
                    </a>
                : null }
          </AuthorSocial>
          </div>
        )}

        {data.isSearch && (
            <IntroText size="thin">
              {isEmpty ? (
                  <div className="no-results">
                      <Text>
                          We could not find any results for your search. You can try again or instead search by the categories listed above.
                      </Text>
                  </div>
              ) : (
                <Text>
                  We found {total} blog {total === 1 ? "post" : "posts"} including <b><em>{data.searchQuery}</em></b>
                </Text>
              )}
            </IntroText>
        )}




        {/* This code if we use  useArchiveInfiniteScroll */}

        {pages.map(({ Wrapper, key, link, isLast }) => (
            <Wrapper key={key}>
              <AllTax link={link}/>
            </Wrapper>
          ))}
          <ButtonContainer>
            {isFetching && <Loading />}
            {isLimit && <Button onClick={fetchNext}>Load Next Page</Button>}
            {isError && (
              <Button onClick={fetchNext}>Something failed - Retry</Button>
            )}
          </ButtonContainer>
    </Container>

  );
};

export default connect(InfiniteListTaxNormal);

const ButtonContainer = styled.div`
  width: 100%;
  text-align: center;
  margin-bottom: 40px;
`;

const Button = styled.button`
  position: relative;
  background: #1f38c5;
  color: white;
  padding: 12px;
  font-weight: bold;
  border: none;
`;

const IntroText = styled.div`
  width: 100%;
  font-weight: initial;
  margin-top: 0.5rem;
  margin-bottom: 2.25rem;
  font-size: 2rem;
  @media (max-width: 450px) {
      font-size: 1.5rem;
  }
  .no-results {
      max-width: 950px;
      margin-left: auto;
      margin-right: auto;
      text-align: center;
      height: 80vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
  }
`;

const Text = styled.p`
  margin: 0 0 1em 0;
  color: #183f4f;
  &:last-child {
    margin-bottom: 0;
  }
  b::before {
      content: open-quote;
      padding: 0;
  }
  b::after {
      content: close-quote;
      padding: 0 0 0 5px;
  }

`;

const Container = styled.section`
  max-width: 1440px;
  width: 100%;
  margin: auto;
  padding: 0 90px 64px;
  list-style: none;

    @media (max-width: 768px) {
        padding: 0 24px 64px;
    }
    .AuthorHeading h1{
        text-transform: capitalize;

        @media (max-width: 336px) {
            margin: 1em 0;
        }
    }
`;


const Header = styled.h1`
    font-size: 2rem;
    font-weight: 700;
    text-transform: uppercase;
    line-height: 42px;
    color: #183F4F;
    margin: 8px 0 36px;

    @media (max-width: 336px) {
        margin: 1em 0;
    }

`;

const AuthorDescription = styled.div`
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    align-items: center;
    margin-bottom: 10px;

    @media (max-width: 400px) {
        flex-direction: column;
        align-items: flex-start;
    }


    div {
        padding-right: 24px;
        @media (max-width: 336px) {
            padding-bottom: 24px;
            padding-right: 0;
        }
    }

    p{
        font-size: 0.875rem;
        font-weight: 400;
        color: #456772;
        line-height: 21px;
        margin: 0;
        max-width: 800px;

        @media (max-width: 700px) {
            max-width: 100%;
        }
    }
    img {
        width: 64px;
        height: 64px;
        border-radius: 50%;
    }
`;
const AuthorSocial = styled.div`
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    align-items: center;
    margin-left: 90px;
    margin-bottom: 36px;

    @media (max-width: 400px) {
        margin-left: 0;
        align-items: flex-start;
        flex-direction: row;
        justify-content: flex-start;
    }

    a {
        padding-right: 20px;
    }
    svg {
        transition: all ease 0.3s;
    }
    .svgIcon:hover path,
    .svgIconLNK:hover path:first-of-type {
        fill: #4F6832;
    }
    .svgIconIG:hover path {
        stroke: #fff;
        fill: #4F6832;
    }
    .svgIconIG:hover path:last-of-type {
        fill: #ffffff;
    }
`;
